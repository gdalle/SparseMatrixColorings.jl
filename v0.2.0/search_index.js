var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"CollapsedDocStrings = true\nCurrentModule = SparseMatrixColorings","category":"page"},{"location":"api/#Public,-exported","page":"API reference","title":"Public, exported","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"SparseMatrixColorings\nGreedyColoringAlgorithm","category":"page"},{"location":"api/#SparseMatrixColorings.SparseMatrixColorings","page":"API reference","title":"SparseMatrixColorings.SparseMatrixColorings","text":"SparseMatrixColorings\n\nSparseMatrixColorings.jl\n\n(Image: Build Status) (Image: Dev Documentation) (Image: Coverage) (Image: Code Style: Blue)\n\nColoring algorithms for sparse Jacobian and Hessian matrices.\n\nGetting started\n\nTo install this package, run the following in a Julia Pkg REPL:\n\npkg> add https://github.com/gdalle/SparseMatrixColorings.jl\n\nBackground\n\nThe algorithms implemented in this package are mainly taken from the following articles:\n\nWhat Color Is Your Jacobian? Graph Coloring for Computing Derivatives, Gebremedhin et al. (2005)\n\nColPack: Software for graph coloring and related problems in scientific computing, Gebremedhin et al. (2013)\n\nSome parts of the articles (like definitions) are thus copied verbatim in the documentation.\n\nAlternatives\n\nColPack.jl: a Julia interface to the C++ library ColPack\nSparseDiffTools.jl: contains Julia implementations of some coloring algorithms\n\n\n\n\n\n","category":"module"},{"location":"api/#SparseMatrixColorings.GreedyColoringAlgorithm","page":"API reference","title":"SparseMatrixColorings.GreedyColoringAlgorithm","text":"GreedyColoringAlgorithm <: ADTypes.AbstractColoringAlgorithm\n\nGreedy coloring algorithm for sparse Jacobians and Hessians, with configurable vertex order.\n\nCompatible with the ADTypes.jl coloring framework.\n\nConstructor\n\nGreedyColoringAlgorithm(order::AbstractOrder=NaturalOrder())\n\nImplements\n\nADTypes.column_coloring and ADTypes.row_coloring with a partial distance-2 coloring of the bipartite graph\nADTypes.symmetric_coloring with a star coloring of the adjacency graph\n\nExample use\n\nusing ADTypes, SparseMatrixColorings, SparseArrays\n\nalgo = GreedyColoringAlgorithm(SparseMatrixColorings.LargestFirst())\nA = sparse([\n    0 0 1 1 0\n    1 0 0 0 1\n    0 1 1 0 0\n    0 1 1 0 1\n])\nADTypes.column_coloring(A, algo)\n\n# output\n\n5-element Vector{Int64}:\n 1\n 2\n 1\n 2\n 3\n\nSee also\n\nAbstractOrder\n\n\n\n\n\n","category":"type"},{"location":"api/#Public,-not-exported","page":"API reference","title":"Public, not exported","text":"","category":"section"},{"location":"api/#Orders","page":"API reference","title":"Orders","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"AbstractOrder\nNaturalOrder\nRandomOrder\nLargestFirst","category":"page"},{"location":"api/#SparseMatrixColorings.AbstractOrder","page":"API reference","title":"SparseMatrixColorings.AbstractOrder","text":"AbstractOrder\n\nAbstract supertype for vertex ordering schemes.\n\nSubtypes\n\nNaturalOrder\nRandomOrder\nLargestFirst\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.NaturalOrder","page":"API reference","title":"SparseMatrixColorings.NaturalOrder","text":"NaturalOrder()\n\nOrder vertices as they come in the graph.\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.RandomOrder","page":"API reference","title":"SparseMatrixColorings.RandomOrder","text":"RandomOrder(rng=default_rng())\n\nOrder vertices with a random permutation.\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.LargestFirst","page":"API reference","title":"SparseMatrixColorings.LargestFirst","text":"LargestFirst()\n\nOrder vertices by decreasing degree.\n\n\n\n\n\n","category":"type"},{"location":"api/#Decompression","page":"API reference","title":"Decompression","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"decompress_columns!\ndecompress_columns\ndecompress_rows!\ndecompress_rows","category":"page"},{"location":"api/#SparseMatrixColorings.decompress_columns!","page":"API reference","title":"SparseMatrixColorings.decompress_columns!","text":"decompress_columns!(\n    A::AbstractMatrix{R}, C::AbstractMatrix{R}, colors::AbstractVector{<:Integer}\n) where {R<:Real}\n\nDecompress the thin matrix C into the fat matrix A.\n\nHere, C is a compressed representation of matrix A obtained by summing the columns that share the same color in colors.\n\n\n\n\n\n","category":"function"},{"location":"api/#SparseMatrixColorings.decompress_columns","page":"API reference","title":"SparseMatrixColorings.decompress_columns","text":"decompress_columns(\n    S::AbstractMatrix{Bool}, C::AbstractMatrix{R}, colors::AbstractVector{<:Integer}\n) where {R<:Real}\n\nDecompress the thin matrix C into a new fat matrix A with the same sparsity pattern as S.\n\nHere, C is a compressed representation of matrix A obtained by summing the columns that share the same color in colors.\n\n\n\n\n\n","category":"function"},{"location":"api/#SparseMatrixColorings.decompress_rows!","page":"API reference","title":"SparseMatrixColorings.decompress_rows!","text":"decompress_rows!(\n    A::AbstractMatrix{R},\n    C::AbstractMatrix{R}, S::AbstractMatrix{Bool},\n    colors::AbstractVector{<:Integer}\n) where {R<:Real}\n\nDecompress the small matrix C into the tall matrix A.\n\nHere, C is a compressed representation of matrix A obtained by summing the rows that share the same color in colors.\n\n\n\n\n\n","category":"function"},{"location":"api/#SparseMatrixColorings.decompress_rows","page":"API reference","title":"SparseMatrixColorings.decompress_rows","text":"decompress_rows(\n    S::AbstractMatrix{Bool}, C::AbstractMatrix{R}, colors::AbstractVector{<:Integer}\n) where {R<:Real}\n\nDecompress the small matrix C into a new tall matrix A with the same sparsity pattern as S.\n\nHere, C is a compressed representation of matrix A obtained by summing the rows that share the same color in colors.\n\n\n\n\n\n","category":"function"},{"location":"api/#Private","page":"API reference","title":"Private","text":"","category":"section"},{"location":"api/#Graphs","page":"API reference","title":"Graphs","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Graph\nBipartiteGraph\nadjacency_graph\nbipartite_graph\nneighbors\nvertices","category":"page"},{"location":"api/#SparseMatrixColorings.Graph","page":"API reference","title":"SparseMatrixColorings.Graph","text":"Graph{T}\n\nUndirected graph structure stored in Compressed Sparse Column (CSC) format.\n\nFields\n\ncolptr::Vector{T}: same as for SparseMatrixCSC\nrowval::Vector{T}: same as for SparseMatrixCSC\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.BipartiteGraph","page":"API reference","title":"SparseMatrixColorings.BipartiteGraph","text":"BipartiteGraph{T}\n\nUndirected bipartite graph structure stored in bidirectional Compressed Sparse Column format (redundancy allows for faster access).\n\nA bipartite graph has two \"sides\", which we number 1 and 2.\n\nFields\n\ng1::Graph{T}: contains the neighbors for vertices on side 1\ng2::Graph{T}: contains the neighbors for vertices on side 2\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.adjacency_graph","page":"API reference","title":"SparseMatrixColorings.adjacency_graph","text":"adjacency_graph(H::AbstractMatrix)\n\nReturn a Graph representing the nonzeros of a symmetric matrix (typically a Hessian matrix).\n\nThe adjacency graph of a symmetrix matric A ∈ ℝ^{n × n} is G(A) = (V, E) where\n\nV = 1:n is the set of rows or columns i/j\n(i, j) ∈ E whenever A[i, j] ≠ 0 and i ≠ j\n\n\n\n\n\n","category":"function"},{"location":"api/#SparseMatrixColorings.bipartite_graph","page":"API reference","title":"SparseMatrixColorings.bipartite_graph","text":"bipartite_graph(J::AbstractMatrix)\n\nReturn a BipartiteGraph representing the nonzeros of a non-symmetric matrix (typically a Jacobian matrix).\n\nThe bipartite graph of a matrix A ∈ ℝ^{m × n} is Gb(A) = (V₁, V₂, E) where\n\nV₁ = 1:m is the set of rows i\nV₂ = 1:n is the set of columns j\n(i, j) ∈ E whenever A[i, j] ≠ 0\n\n\n\n\n\n","category":"function"},{"location":"api/#SparseMatrixColorings.neighbors","page":"API reference","title":"SparseMatrixColorings.neighbors","text":"neighbors(bg::BipartiteGraph, Val(side), v::Integer)\n\nReturn the neighbors of v (a vertex from the specified side, 1 or 2), in the graph bg.\n\n\n\n\n\n","category":"function"},{"location":"api/#SparseMatrixColorings.vertices","page":"API reference","title":"SparseMatrixColorings.vertices","text":"vertices(bg::BipartiteGraph, Val(side))\n\nReturn the list of vertices of bg from the specified side as a range 1:n.\n\n\n\n\n\n","category":"function"},{"location":"api/#Coloring","page":"API reference","title":"Coloring","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"partial_distance2_coloring\nstar_coloring1\ncolor_groups","category":"page"},{"location":"api/#SparseMatrixColorings.partial_distance2_coloring","page":"API reference","title":"SparseMatrixColorings.partial_distance2_coloring","text":"partial_distance2_coloring(bg::BipartiteGraph, ::Val{side}, order::AbstractOrder)\n\nCompute a distance-2 coloring of the given side (1 or 2) in the bipartite graph bg and return a vector of integer colors.\n\nA distance-2 coloring is such that two vertices have different colors if they are at distance at most 2.\n\nThe vertices are colored in a greedy fashion, following the order supplied.\n\nSee also\n\nBipartiteGraph\nAbstractOrder\n\n\n\n\n\n","category":"function"},{"location":"api/#SparseMatrixColorings.star_coloring1","page":"API reference","title":"SparseMatrixColorings.star_coloring1","text":"star_coloring1(g::Graph, order::AbstractOrder)\n\nCompute a star coloring of all vertices in the adjacency graph g and return a vector of integer colors.\n\nA star coloring is a distance-1 coloring such that every path on 4 vertices uses at least 3 colors.\n\nThe vertices are colored in a greedy fashion, following the order supplied.\n\nSee also\n\nGraph\nAbstractOrder\n\n\n\n\n\n","category":"function"},{"location":"api/#SparseMatrixColorings.color_groups","page":"API reference","title":"SparseMatrixColorings.color_groups","text":"color_groups(colors)\n\nReturn groups::Vector{Vector{Int}} such that i ∈ groups[c] iff colors[i] == c.\n\nAssumes the colors are contiguously numbered from 1 to some cmax.\n\n\n\n\n\n","category":"function"},{"location":"api/#Testing","page":"API reference","title":"Testing","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"check_structurally_orthogonal_columns\ncheck_structurally_orthogonal_rows\ncheck_symmetrically_orthogonal","category":"page"},{"location":"api/#SparseMatrixColorings.check_structurally_orthogonal_columns","page":"API reference","title":"SparseMatrixColorings.check_structurally_orthogonal_columns","text":"check_structurally_orthogonal_columns(\n    A::AbstractMatrix, colors::AbstractVector{<:Integer}\n    verbose=false\n)\n\nReturn true if coloring the columns of the matrix A with the vector colors results in a partition that is structurally orthogonal, and false otherwise.\n\nA partition of the columns of a matrix A is structurally orthogonal if, for every nonzero element A[i, j], the group containing column A[:, j] has no other column with a nonzero in row i.\n\nwarning: Warning\nThis function is not coded with efficiency in mind, it is designed for small-scale tests.\n\n\n\n\n\n","category":"function"},{"location":"api/#SparseMatrixColorings.check_structurally_orthogonal_rows","page":"API reference","title":"SparseMatrixColorings.check_structurally_orthogonal_rows","text":"check_structurally_orthogonal_rows(\n    A::AbstractMatrix, colors::AbstractVector{<:Integer};\n    verbose=false\n)\n\nReturn true if coloring the rows of the matrix A with the vector colors results in a partition that is structurally orthogonal, and false otherwise.\n\nA partition of the rows of a matrix A is structurally orthogonal if, for every nonzero element A[i, j], the group containing row A[i, :] has no other row with a nonzero in column j.\n\nwarning: Warning\nThis function is not coded with efficiency in mind, it is designed for small-scale tests.\n\n\n\n\n\n","category":"function"},{"location":"api/#SparseMatrixColorings.check_symmetrically_orthogonal","page":"API reference","title":"SparseMatrixColorings.check_symmetrically_orthogonal","text":"check_symmetrically_orthogonal(\n    A::AbstractMatrix, colors::AbstractVector{<:Integer};\n    verbose=false\n)\n\nReturn true if coloring the columns of the symmetric matrix A with the vector colors results in a partition that is symmetrically orthogonal, and false otherwise.\n\nA partition of the columns of a symmetrix matrix A is symmetrically orthogonal if, for every nonzero element A[i, j], either\n\nthe group containing the column A[:, j] has no other column with a nonzero in row i\nthe group containing the column A[:, i] has no other column with a nonzero in row j\n\nwarning: Warning\nThis function is not coded with efficiency in mind, it is designed for small-scale tests.\n\n\n\n\n\n","category":"function"},{"location":"#SparseMatrixColorings.jl","page":"Home","title":"SparseMatrixColorings.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Dev Documentation) (Image: Coverage) (Image: Code Style: Blue)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Coloring algorithms for sparse Jacobian and Hessian matrices.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install this package, run the following in a Julia Pkg REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/gdalle/SparseMatrixColorings.jl","category":"page"},{"location":"#Background","page":"Home","title":"Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The algorithms implemented in this package are mainly taken from the following articles:","category":"page"},{"location":"","page":"Home","title":"Home","text":"What Color Is Your Jacobian? Graph Coloring for Computing Derivatives, Gebremedhin et al. (2005)","category":"page"},{"location":"","page":"Home","title":"Home","text":"ColPack: Software for graph coloring and related problems in scientific computing, Gebremedhin et al. (2013)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some parts of the articles (like definitions) are thus copied verbatim in the documentation.","category":"page"},{"location":"#Alternatives","page":"Home","title":"Alternatives","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ColPack.jl: a Julia interface to the C++ library ColPack\nSparseDiffTools.jl: contains Julia implementations of some coloring algorithms","category":"page"}]
}
