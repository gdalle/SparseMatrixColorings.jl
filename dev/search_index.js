var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"CollapsedDocStrings = true","category":"page"},{"location":"api/#Public","page":"API reference","title":"Public","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [SparseMatrixColorings]\nPrivate = false","category":"page"},{"location":"api/#SparseMatrixColorings.SparseMatrixColorings","page":"API reference","title":"SparseMatrixColorings.SparseMatrixColorings","text":"SparseMatrixColorings\n\nColoring algorithms for sparse Jacobian and Hessian matrices.\n\nThe algorithms implemented in this package are mainly taken from the following articles:\n\nWhat Color Is Your Jacobian? Graph Coloring for Computing Derivatives, Gebremedhin et al. (2005)\n\nColPack: Software for graph coloring and related problems in scientific computing, Gebremedhin et al. (2013)\n\nSome parts of the articles (like definitions) are thus copied verbatim in the documentation.\n\n\n\n\n\n","category":"module"},{"location":"api/#SparseMatrixColorings.GreedyColoringAlgorithm","page":"API reference","title":"SparseMatrixColorings.GreedyColoringAlgorithm","text":"GreedyColoringAlgorithm <: ADTypes.AbstractColoringAlgorithm\n\nMatrix coloring algorithm for sparse Jacobians and Hessians.\n\nCompatible with the ADTypes.jl coloring framework.\n\nConstructor\n\nGreedyColoringAlgorithm(order::AbstractOrder=NaturalOrder())\n\nImplements\n\nADTypes.column_coloring and ADTypes.row_coloring with a partial distance-2 coloring of the bipartite graph\nADTypes.symmetric_coloring with a star coloring of the adjacency graph\n\n\n\n\n\n","category":"type"},{"location":"api/#Private","page":"API reference","title":"Private","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [SparseMatrixColorings]\nPublic = false","category":"page"},{"location":"api/#SparseMatrixColorings.AbstractOrder","page":"API reference","title":"SparseMatrixColorings.AbstractOrder","text":"AbstractOrder\n\nAbstract supertype for vertex ordering schemes.\n\nSubtypes\n\nNaturalOrder\nRandomOrder\nLargestFirst\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.AdjacencyGraph","page":"API reference","title":"SparseMatrixColorings.AdjacencyGraph","text":"AdjacencyGraph\n\nUndirected graph representing the nonzeros of a symmetrix matrix (typically a Hessian matrix).\n\nThe adjacency graph of a symmetrix matrix A ∈ ℝ^{n × n} is G(A) = (V, E) where\n\nV = 1:n is the set of rows or columns\n(i, j) ∈ E whenever A[i, j] ≠ 0 and i ≠ j\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.BipartiteGraph","page":"API reference","title":"SparseMatrixColorings.BipartiteGraph","text":"BipartiteGraph\n\nUndirected bipartite graph representing the nonzeros of a non-symmetric matrix (typically a Jacobian matrix).\n\nThe bipartite graph of a matrix A ∈ ℝ^{m × n} is Gb(A) = (V₁, V₂, E) where\n\nV₁ = 1:m is the set of rows i\nV₂ = 1:n is the set of columns j\n(i, j) ∈ E whenever A[i, j] ≠ 0\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.LargestFirst","page":"API reference","title":"SparseMatrixColorings.LargestFirst","text":"LargestFirst()\n\nOrder vertices by decreasing degree.\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.NaturalOrder","page":"API reference","title":"SparseMatrixColorings.NaturalOrder","text":"NaturalOrder()\n\nOrder vertices as they come in the graph.\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.RandomOrder","page":"API reference","title":"SparseMatrixColorings.RandomOrder","text":"RandomOrder(rng=default_rng())\n\nOrder vertices with a random permutation.\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.check_structurally_orthogonal_columns-Tuple{AbstractMatrix, AbstractVector{<:Integer}}","page":"API reference","title":"SparseMatrixColorings.check_structurally_orthogonal_columns","text":"check_structurally_orthogonal_columns(\n    A::AbstractMatrix, colors::AbstractVector{<:Integer}\n    verbose=false\n)\n\nReturn true if coloring the columns of the matrix A with the vector colors results in a partition that is structurally orthogonal, and false otherwise.\n\nA partition of the columns of a matrix A is structurally orthogonal if, for every nonzero element A[i, j], the group containing column A[:, j] has no other column with a nonzero in row i.\n\nwarning: Warning\nThis function is not coded with efficiency in mind, it is designed for small-scale tests.\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.check_structurally_orthogonal_rows-Tuple{AbstractMatrix, AbstractVector{<:Integer}}","page":"API reference","title":"SparseMatrixColorings.check_structurally_orthogonal_rows","text":"check_structurally_orthogonal_rows(\n    A::AbstractMatrix, colors::AbstractVector{<:Integer};\n    verbose=false\n)\n\nReturn true if coloring the rows of the matrix A with the vector colors results in a partition that is structurally orthogonal, and false otherwise.\n\nA partition of the rows of a matrix A is structurally orthogonal if, for every nonzero element A[i, j], the group containing row A[i, :] has no other row with a nonzero in column j.\n\nwarning: Warning\nThis function is not coded with efficiency in mind, it is designed for small-scale tests.\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.check_symmetrically_orthogonal-Tuple{AbstractMatrix, AbstractVector{<:Integer}}","page":"API reference","title":"SparseMatrixColorings.check_symmetrically_orthogonal","text":"check_symmetrically_orthogonal(\n    A::AbstractMatrix, colors::AbstractVector{<:Integer};\n    verbose=false\n)\n\nReturn true if coloring the columns of the symmetric matrix A with the vector colors results in a partition that is symmetrically orthogonal, and false otherwise.\n\nA partition of the columns of a symmetrix matrix A is symmetrically orthogonal if, for every nonzero element A[i, j], either\n\nthe group containing the column A[:, j] has no other column with a nonzero in row i\nthe group containing the column A[:, i] has no other column with a nonzero in row j\n\nwarning: Warning\nThis function is not coded with efficiency in mind, it is designed for small-scale tests.\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.neighbors-Tuple{SparseMatrixColorings.AdjacencyGraph, Integer}","page":"API reference","title":"SparseMatrixColorings.neighbors","text":"neighbors(ag::AdjacencyGraph, v::Integer)\n\nReturn the neighbors of v in the graph ag.\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.neighbors-Tuple{SparseMatrixColorings.BipartiteGraph, Val{1}, Integer}","page":"API reference","title":"SparseMatrixColorings.neighbors","text":"neighbors(bg::BipartiteGraph, Val(side), v::Integer)\n\nReturn the neighbors of v, which is a vertex from the specified side (1 or 2), in the graph bg.\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.partial_distance2_coloring-Union{Tuple{side}, Tuple{SparseMatrixColorings.BipartiteGraph, Val{side}, SparseMatrixColorings.AbstractOrder}} where side","page":"API reference","title":"SparseMatrixColorings.partial_distance2_coloring","text":"partial_distance2_coloring(bg::BipartiteGraph, ::Val{side}, order::AbstractOrder)\n\nCompute a distance-2 coloring of the given side (1 or 2) in the bipartite graph bg and return a vector of integer colors.\n\nA distance-2 coloring is such that two vertices have different colors if they are at distance at most 2.\n\nThe vertices are colored in a greedy fashion, following the order supplied.\n\nSee also\n\nBipartiteGraph\nAbstractOrder\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.star_coloring-Tuple{SparseMatrixColorings.AdjacencyGraph, SparseMatrixColorings.AbstractOrder}","page":"API reference","title":"SparseMatrixColorings.star_coloring","text":"star_coloring(ag::AdjacencyGraph, order::AbstractOrder)\n\nCompute a star coloring of all vertices in the adjacency graph ag and return a vector of integer colors.\n\nA star coloring is a distance-1 coloring such that every path on 4 vertices uses at least 3 colors.\n\nThe vertices are colored in a greedy fashion, following the order supplied.\n\nSee also\n\nAdjacencyGraph\nAbstractOrder\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatrixColorings.jl","page":"Home","title":"SparseMatrixColorings.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Dev Documentation) (Image: Coverage) (Image: Code Style: Blue)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Coloring algorithms for sparse Jacobian and Hessian matrices.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install this package, run the following in a Julia Pkg REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/gdalle/SparseMatrixColorings.jl","category":"page"},{"location":"#Background","page":"Home","title":"Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The algorithms implemented in this package are mainly taken from the following articles:","category":"page"},{"location":"","page":"Home","title":"Home","text":"What Color Is Your Jacobian? Graph Coloring for Computing Derivatives, Gebremedhin et al. (2005)","category":"page"},{"location":"","page":"Home","title":"Home","text":"ColPack: Software for graph coloring and related problems in scientific computing, Gebremedhin et al. (2013)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some parts of the articles (like definitions) are thus copied verbatim in the documentation.","category":"page"},{"location":"#Alternatives","page":"Home","title":"Alternatives","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ColPack.jl: a Julia interface to the C++ library ColPack\nSparseDiffTools.jl: contains Julia implementations of some coloring algorithms","category":"page"}]
}
