var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"CollapsedDocStrings = true","category":"page"},{"location":"api/#Public","page":"API reference","title":"Public","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [SparseMatrixColorings]\nPrivate = false","category":"page"},{"location":"api/#SparseMatrixColorings.SparseMatrixColorings","page":"API reference","title":"SparseMatrixColorings.SparseMatrixColorings","text":"SparseMatrixColorings\n\nColoring algorithms for sparse Jacobian and Hessian matrices.\n\nThe algorithms implemented in this package are all taken from the following survey:\n\nWhat Color Is Your Jacobian? Graph Coloring for Computing Derivatives, Gebremedhin et al. (2005)\n\nSome parts of the survey (like definitions and theorems) are also copied verbatim or referred to by their number in the documentation.\n\n\n\n\n\n","category":"module"},{"location":"api/#SparseMatrixColorings.GreedyColoringAlgorithm","page":"API reference","title":"SparseMatrixColorings.GreedyColoringAlgorithm","text":"GreedyColoringAlgorithm <: ADTypes.AbstractColoringAlgorithm\n\nMatrix coloring algorithm for sparse Jacobians and Hessians.\n\nCompatible with the ADTypes.jl coloring framework.\n\nImplements\n\nADTypes.column_coloring with a partial distance-2 coloring of the bipartite graph\nADTypes.row_coloring with a partial distance-2 coloring of the bipartite graph\nADTypes.symmetric_coloring with a star coloring of the adjacency graph\n\n\n\n\n\n","category":"type"},{"location":"api/#Private","page":"API reference","title":"Private","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [SparseMatrixColorings]\nPublic = false","category":"page"},{"location":"api/#SparseMatrixColorings.AdjacencyGraph","page":"API reference","title":"SparseMatrixColorings.AdjacencyGraph","text":"AdjacencyGraph\n\nRepresent a graph between the columns of a symmetric n × n matrix A with nonzero diagonal elements.\n\nThis graph is defined as G = (C, E) where C = 1:n is the set of columns and (i, j) ∈ E whenever A[i, j] is nonzero for some j ∈ 1:m, j ≠ i.\n\nFields\n\nA_colmajor::AbstractMatrix: output of col_major applied to A\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.BipartiteGraph","page":"API reference","title":"SparseMatrixColorings.BipartiteGraph","text":"BipartiteGraph\n\nRepresent a bipartite graph between the rows and the columns of a non-symmetric m × n matrix A.\n\nThis graph is defined as G = (R, C, E) where R = 1:m is the set of row indices, C = 1:n is the set of column indices and (i, j) ∈ E whenever A[i, j] is nonzero.\n\nFields\n\nA_colmajor::AbstractMatrix: output of col_major applied to A (useful to get neighbors of a column)\nA_rowmajor::AbstractMatrix: output of row_major applied to A (useful to get neighbors of a row)\n\n\n\n\n\n","category":"type"},{"location":"api/#SparseMatrixColorings.check_structurally_orthogonal_columns-Tuple{AbstractMatrix, AbstractVector{<:Integer}}","page":"API reference","title":"SparseMatrixColorings.check_structurally_orthogonal_columns","text":"check_structurally_orthogonal_columns(A, colors; verbose=false)\n\nReturn true if coloring the columns of the matrix A with the vector colors results in a partition that is structurally orthogonal, and false otherwise.\n\nDef 3.2: A partition of the columns of a matrix A is structurally orthogonal if, for every nonzero element A[i, j], the group containing column A[:, j] has no other column with a nonzero in row i.\n\nThm 3.5: The function distance2_column_coloring applied to the BipartiteGraph of A should return a suitable coloring.\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.check_structurally_orthogonal_rows-Tuple{AbstractMatrix, AbstractVector{<:Integer}}","page":"API reference","title":"SparseMatrixColorings.check_structurally_orthogonal_rows","text":"check_structurally_orthogonal_rows(A, colors; verbose=false)\n\nReturn true if coloring the rows of the matrix A with the vector colors results in a partition that is structurally orthogonal, and false otherwise.\n\nDef 3.2: A partition of the rows of a matrix A is structurally orthogonal if, for every nonzero element A[i, j], the group containing row A[i, :] has no other row with a nonzero in column j.\n\nThm 3.5: The function distance2_row_coloring applied to the BipartiteGraph of A should return a suitable coloring.\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.check_symmetrically_orthogonal-Tuple{AbstractMatrix, AbstractVector{<:Integer}}","page":"API reference","title":"SparseMatrixColorings.check_symmetrically_orthogonal","text":"check_symmetrically_orthogonal(A, colors; verbose=false)\n\nReturn true if coloring the columns of the symmetric matrix A with the vector colors results in a partition that is symmetrically orthogonal, and false otherwise.\n\nDef 4.2: A partition of the columns of a symmetrix matrix A is symmetrically orthogonal if, for every nonzero element A[i, j], either\n\nthe group containing the column A[:, j] has no other column with a nonzero in row i\nthe group containing the column A[:, i] has no other column with a nonzero in row j\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.col_major-Tuple{M} where M<:(AbstractMatrix)","page":"API reference","title":"SparseMatrixColorings.col_major","text":"col_major(A::AbstractMatrix)\n\nConstruct a column-major representation of the matrix A.\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.distance2_column_coloring-Tuple{SparseMatrixColorings.BipartiteGraph}","page":"API reference","title":"SparseMatrixColorings.distance2_column_coloring","text":"distance2_column_coloring(g::BipartiteGraph)\n\nCompute a distance-2 coloring of the column vertices in the BipartiteGraph g and return a vector of integer colors.\n\nA distance-2 coloring is such that two vertices have different colors if they are at distance at most 2.\n\nThe algorithm used is the greedy Algorithm 3.2.\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.distance2_row_coloring-Tuple{SparseMatrixColorings.BipartiteGraph}","page":"API reference","title":"SparseMatrixColorings.distance2_row_coloring","text":"distance2_row_coloring(g::BipartiteGraph)\n\nCompute a distance-2 coloring of the row vertices in the BipartiteGraph g and return a vector of integer colors.\n\nA distance-2 coloring is such that two vertices have different colors if they are at distance at most 2.\n\nThe algorithm used is the greedy Algorithm 3.2.\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.row_major-Tuple{M} where M<:(AbstractMatrix)","page":"API reference","title":"SparseMatrixColorings.row_major","text":"row_major(A::AbstractMatrix)\n\nConstruct a row-major representation of the matrix A.\n\n\n\n\n\n","category":"method"},{"location":"api/#SparseMatrixColorings.star_coloring-Tuple{SparseMatrixColorings.AdjacencyGraph}","page":"API reference","title":"SparseMatrixColorings.star_coloring","text":"star_coloring(g::BipartiteGraph)\n\nCompute a star coloring of the column vertices in the AdjacencyGraph g and return a vector of integer colors.\n\nDef 4.5: A star coloring is a distance-1 coloring such that every path on four vertices uses at least three colors.\n\nThe algorithm used is the greedy Algorithm 4.1.\n\n\n\n\n\n","category":"method"},{"location":"#SparseMatrixColorings.jl","page":"Home","title":"SparseMatrixColorings.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Dev Documentation) (Image: Coverage) (Image: Code Style: Blue)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Coloring algorithms for sparse Jacobian and Hessian matrices.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install this package, run the following in a Julia Pkg REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/gdalle/SparseMatrixColorings.jl","category":"page"},{"location":"#Background","page":"Home","title":"Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The algorithms implemented in this package are all taken from the following survey:","category":"page"},{"location":"","page":"Home","title":"Home","text":"What Color Is Your Jacobian? Graph Coloring for Computing Derivatives, Gebremedhin et al. (2005)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some parts of the survey (like definitions and theorems) are also copied verbatim or referred to by their number in the documentation.","category":"page"},{"location":"#Alternatives","page":"Home","title":"Alternatives","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ColPack.jl: a Julia interface to the C++ library ColPack\nSparseDiffTools.jl: contains Julia implementations of some coloring algorithms","category":"page"}]
}
